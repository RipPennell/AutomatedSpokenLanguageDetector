Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"$PROJECT_DIR$/../..\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision 6d3b5f402bd8f1e0f0f6f06cddf669c265b157ec)
+++ .idea/vcs.xml	(date 1613249098507)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/rip/thesis/automatedspokenlanguagedetector/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package rip.thesis.automatedspokenlanguagedetector;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.res.AssetManager;\r\nimport android.media.MediaPlayer;\r\nimport android.media.MediaRecorder;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.annotation.RequiresApi;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.core.app.ActivityCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\nimport androidx.core.content.ContextCompat;\r\n\r\nimport com.arthenica.mobileffmpeg.FFmpeg;\r\nimport com.chaquo.python.PyObject;\r\nimport com.chaquo.python.Python;\r\nimport com.chaquo.python.android.AndroidPlatform;\r\nimport com.google.android.material.floatingactionbutton.FloatingActionButton;\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\nimport java.io.OutputStream;\r\n\r\nimport static android.Manifest.permission.RECORD_AUDIO;\r\nimport static android.Manifest.permission.WRITE_EXTERNAL_STORAGE;\r\n\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    FloatingActionButton buttonStart, buttonStop, buttonPlayLastRecordAudio;\r\n    TextView displayedText, progressBarText;\r\n    ProgressBar progressBar;\r\n    String audioSavePathInDevice = null;\r\n    String wavFile = null;\r\n    MediaRecorder mediaRecorder ;\r\n    public static final int RequestPermissionCode = 1;\r\n    MediaPlayer mediaPlayer ;\r\n    private void copyFile(InputStream in, OutputStream out) throws IOException {\r\n        byte[] buffer = new byte[1024];\r\n        int read;\r\n        while((read = in.read(buffer)) != -1){\r\n            out.write(buffer, 0, read);\r\n        }\r\n    }\r\n\r\n    public class CountDownTimer extends android.os.CountDownTimer {\r\n\r\n        public CountDownTimer(long millisInFuture, long countDownInterval) {\r\n            super(millisInFuture, countDownInterval);\r\n            progressBar.setMax((int) millisInFuture/100);\r\n            progressBar.setProgress(0);\r\n        }\r\n\r\n        @Override\r\n        public void onTick(long millisUntilFinished) {\r\n            progressBar.incrementProgressBy(1);\r\n            String progressText = \"Loaded in \" + String.format(\"%.2f\", (Math.random() +\r\n                    progressBar.getProgress())/progressBar.getMax()*255) + \"MB of 255MB trained model\";\r\n//            String progressText = String.valueOf(progressBar.getProgress());\r\n            progressBarText.setText(progressText);\r\n        }\r\n\r\n        @Override\r\n        public void onFinish() {\r\n        }\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\r\n    @SuppressLint(\"SetTextI18n\")\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n\r\n\r\n        buttonStart = findViewById(R.id.button);\r\n        buttonStop = findViewById(R.id.button2);\r\n        buttonPlayLastRecordAudio = findViewById(R.id.button3);\r\n        displayedText = findViewById(R.id.textView);\r\n        progressBarText = findViewById(R.id.textView2);\r\n        progressBar = findViewById(R.id.progressBar);\r\n\r\n\r\n\r\n        buttonStart.setEnabled(false);\r\n        buttonStart.setAlpha(0.25f);\r\n        buttonStop.setEnabled(false);\r\n        buttonStop.setAlpha(0.25f);\r\n        buttonPlayLastRecordAudio.setEnabled(false);\r\n        buttonPlayLastRecordAudio.setAlpha(0.25f);\r\n\r\n        displayedText.setVisibility(View.INVISIBLE);\r\n        displayedText.setText(\"Record someone talking and I'll tell you the language\");\r\n\r\n\r\n        CountDownTimer countDownTimer = new CountDownTimer(15000, 100);\r\n        countDownTimer.start();\r\n\r\n\r\n\r\n        String dirPath = getFilesDir().getAbsolutePath() + \"/oneTimeTestDatabase\";\r\n        audioSavePathInDevice = dirPath + \"/audioFile.m4a\";\r\n        wavFile = dirPath + \"/wavFile.wav\";\r\n\r\n\r\n\r\n\r\n\r\n        new Thread(() -> {\r\n            File projDir = new File(dirPath);\r\n            if (!projDir.exists()) {\r\n                projDir.mkdirs();\r\n\r\n                AssetManager assetManager = getAssets();\r\n                String[] files = null;\r\n                try {\r\n                    files = assetManager.list(\"\");\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                if (files != null) for (String filename : files) {\r\n                    InputStream in = null;\r\n                    OutputStream out = null;\r\n                    try {\r\n                        in = assetManager.open(filename);\r\n                        File outFile = new File(dirPath, filename);\r\n                        out = new FileOutputStream(outFile);\r\n                        copyFile(in, out);\r\n                    } catch(IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                    finally {\r\n                        if (in != null) {\r\n                            try {\r\n                                in.close();\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                        if (out != null) {\r\n                            try {\r\n                                out.close();\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (! Python.isStarted()) {\r\n                Python.start(new AndroidPlatform(this));\r\n            }\r\n            Python py = Python.getInstance();\r\n            PyObject pythonScript = py.getModule(\"PyScriptForApp\");\r\n            pythonScript.callAttr(\"pythonClassify\", dirPath + \"/EasterEgg.wav\",\r\n                    dirPath + \"/model.tflite\");\r\n\r\n            progressBar.post(() -> progressBar.setProgress(100));\r\n            progressBar.post(() -> progressBar.setVisibility(View.INVISIBLE));\r\n            progressBarText.post(() -> progressBarText.setVisibility(View.INVISIBLE));\r\n            displayedText.post(() -> displayedText.setVisibility(View.VISIBLE));\r\n            buttonStart.post(() -> buttonStart.setEnabled(true));\r\n            buttonStart.post(() -> buttonStart.setAlpha(1f));\r\n        }).start();\r\n\r\n\r\n\r\n\r\n\r\n        buttonStart.setOnClickListener(view -> {\r\n\r\n            if(checkPermission()) {\r\n\r\n\r\n\r\n                MediaRecorderReady();\r\n\r\n                try {\r\n                    mediaRecorder.prepare();\r\n                    mediaRecorder.start();\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n                buttonStart.setEnabled(false);\r\n                buttonStart.setAlpha(0.25f);\r\n                buttonStop.setEnabled(true);\r\n                buttonStop.setAlpha(1f);\r\n                buttonPlayLastRecordAudio.setEnabled(false);\r\n                buttonPlayLastRecordAudio.setAlpha(0.25f);\r\n\r\n\r\n\r\n//                    Toast.makeText(MainActivity.this, \"Recording started\",\r\n//                            Toast.LENGTH_LONG).show();\r\n            } else {\r\n                requestPermission();\r\n            }\r\n\r\n        });\r\n\r\n        buttonStop.setOnClickListener(view -> {\r\n            mediaRecorder.stop();\r\n            buttonStop.setEnabled(false);\r\n            buttonStop.setAlpha(0.25f);\r\n            buttonPlayLastRecordAudio.setEnabled(true);\r\n            buttonPlayLastRecordAudio.setAlpha(1f);\r\n            buttonStart.setEnabled(true);\r\n            buttonStart.setAlpha(1f);\r\n\r\n            FFmpeg.execute(\"-i \" + audioSavePathInDevice + \" -y \" + wavFile);\r\n//            PyObject test = py.getModule(\"test\");\r\n//            PyObject test1 = test.callAttr(\"helloworld\");\r\n//            displayedText.setText(test1.toString());\r\n\r\n\r\n\r\n            //def pythonClassify(tflitePath, filePath):\r\n\r\n            Python py = Python.getInstance();\r\n            PyObject pythonScript = py.getModule(\"PyScriptForApp\");\r\n            PyObject pythonClassify = pythonScript.callAttr(\"pythonClassify\", wavFile,\r\n                    dirPath + \"/model.tflite\");\r\n            displayedText.setText(pythonClassify.toString());\r\n\r\n//            Context context = null;\r\n//            try {\r\n//                context = createPackageContext(\"rip.thesis.automatedspokenlanguagedetector\", 0);\r\n//                String modelPath = context.getDataDir().getAbsolutePath() + \"/model.tflite\";\r\n//\r\n//                Python py = Python.getInstance();\r\n////            PyObject test = py.getModule(\"test\");\r\n////            PyObject test1 = test.callAttr(\"helloworld\");\r\n////            displayedText.setText(test1.toString());\r\n//\r\n//                PyObject pythonScript = py.getModule(\"PyScriptForApp\");\r\n//                //def pythonClassify(tflitePath, filePath):\r\n//                PyObject pythonClassify = pythonScript.callAttr(\"pythonClassify\", wavFile, modelPath);\r\n//                displayedText.setText(pythonClassify.toString());\r\n//            } catch (PackageManager.NameNotFoundException e) {\r\n//                e.printStackTrace();\r\n//            }\r\n\r\n\r\n\r\n\r\n\r\n//                Toast.makeText(MainActivity.this, \"Recording Completed\",\r\n//                        Toast.LENGTH_LONG).show();\r\n        });\r\n\r\n        buttonPlayLastRecordAudio.setOnClickListener(view -> {\r\n\r\n            buttonStop.setEnabled(false);\r\n\r\n            mediaPlayer = new MediaPlayer();\r\n            try {\r\n//                mediaPlayer.setDataSource(audioSavePathInDevice);\r\n                mediaPlayer.setDataSource(wavFile);\r\n                mediaPlayer.prepare();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            mediaPlayer.start();\r\n//                Toast.makeText(MainActivity.this, \"Recording Playing\",\r\n//                        Toast.LENGTH_LONG).show();\r\n        });\r\n    }\r\n\r\n    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)\r\n    public void MediaRecorderReady(){\r\n        mediaRecorder=new MediaRecorder();\r\n        mediaRecorder.setAudioSource(MediaRecorder.AudioSource.MIC);\r\n        mediaRecorder.setOutputFormat(MediaRecorder.OutputFormat.MPEG_4);\r\n        mediaRecorder.setAudioEncoder(MediaRecorder.AudioEncoder.AAC);\r\n        mediaRecorder.setOutputFile(audioSavePathInDevice);\r\n    }\r\n\r\n    private void requestPermission() {\r\n        ActivityCompat.requestPermissions(MainActivity.this, new\r\n                String[]{WRITE_EXTERNAL_STORAGE, RECORD_AUDIO}, RequestPermissionCode);\r\n    }\r\n\r\n    @Override\r\n    public void onRequestPermissionsResult(int requestCode,\r\n                                           @NonNull String[] permissions, int[] grantResults) {\r\n        if (requestCode == RequestPermissionCode) {\r\n            if (grantResults.length > 0) {\r\n                boolean StoragePermission = grantResults[0] ==\r\n                        PackageManager.PERMISSION_GRANTED;\r\n                boolean RecordPermission = grantResults[1] ==\r\n                        PackageManager.PERMISSION_GRANTED;\r\n\r\n                if (StoragePermission && RecordPermission) {\r\n                    Toast.makeText(MainActivity.this, \"Permission Granted\",\r\n                            Toast.LENGTH_LONG).show();\r\n                } else {\r\n                    Toast.makeText(MainActivity.this, \"Permission \" +\r\n                            \"Denied\", Toast.LENGTH_LONG).show();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public boolean checkPermission() {\r\n        int result = ContextCompat.checkSelfPermission(getApplicationContext(),\r\n                WRITE_EXTERNAL_STORAGE);\r\n        int result1 = ContextCompat.checkSelfPermission(getApplicationContext(),\r\n                RECORD_AUDIO);\r\n        return result == PackageManager.PERMISSION_GRANTED &&\r\n                result1 == PackageManager.PERMISSION_GRANTED;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/rip/thesis/automatedspokenlanguagedetector/MainActivity.java	(revision 6d3b5f402bd8f1e0f0f6f06cddf669c265b157ec)
+++ app/src/main/java/rip/thesis/automatedspokenlanguagedetector/MainActivity.java	(date 1613249192379)
@@ -67,6 +67,7 @@
             String progressText = "Loaded in " + String.format("%.2f", (Math.random() +
                     progressBar.getProgress())/progressBar.getMax()*255) + "MB of 255MB trained model";
 //            String progressText = String.valueOf(progressBar.getProgress());
+//            String progressText = String.valueOf(millisUntilFinished);
             progressBarText.setText(progressText);
         }
 
